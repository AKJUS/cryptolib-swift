//
//  SivTests.swift
//  CryptoLibTests
//
//  Created by Sebastian Stenzel on 29.04.20.
//  Copyright Â© 2020 Skymatic GmbH. All rights reserved.
//

import XCTest
@testable import CryptoLib

class AesSivTests: XCTestCase {
	
	let aesKey: [UInt8] = [
		0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
		0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
	]
	
	let macKey: [UInt8] = [
		0xff, 0xfe, 0xfd, 0xfc,	0xfb, 0xfa, 0xf9, 0xf8,
		0xf7, 0xf6, 0xf5, 0xf4,	0xf3, 0xf2, 0xf1, 0xf0
	]

	let ad: [UInt8] = [
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
		0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27
	]
	
	func testEncrypt() {
		let plaintext: [UInt8] = [
			0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
			0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee
		]

		let expected: [UInt8] = [
			0x85, 0x63, 0x2d, 0x07, 0xc6, 0xe8, 0xf3, 0x7f,
			0x95, 0x0a, 0xcd, 0x32, 0x0a, 0x2e, 0xcc, 0x93,
			0x40, 0xc0, 0x2b, 0x96, 0x90, 0xc4, 0xdc, 0x04,
			0xda, 0xef, 0x7f, 0x6a, 0xfe, 0x5c
		]
		
		let result = try? AesSiv.encrypt(aesKey: aesKey, macKey: macKey, plaintext: plaintext, ad: ad)

		XCTAssertEqual(expected, result)
	}
	
	func testDecrypt() {
		let ciphertext: [UInt8] = [
			0x85, 0x63, 0x2d, 0x07, 0xc6, 0xe8, 0xf3, 0x7f,
			0x95, 0x0a, 0xcd, 0x32, 0x0a, 0x2e, 0xcc, 0x93,
			0x40, 0xc0, 0x2b, 0x96, 0x90, 0xc4, 0xdc, 0x04,
			0xda, 0xef, 0x7f, 0x6a, 0xfe, 0x5c
		]
		
		let expected: [UInt8] = [
			0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
			0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee
		]
		
		let result = try? AesSiv.decrypt(aesKey: aesKey, macKey: macKey, ciphertext: ciphertext, ad: ad)

		XCTAssertEqual(expected, result)
	}
	
	func testAesCtr() {
		let aesKey: [UInt8] = [
			0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
			0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
		]
		
		let iv: [UInt8] = [
			0x7b, 0xdb, 0x6e, 0x3b, 0x43, 0x26, 0x67, 0xeb,
			0x06, 0xf4, 0xd1, 0x4b, 0x7f, 0x2f, 0xbd, 0x0f
		]

		let plaintext = [UInt8](repeating: 0x00, count: 16 * 3)

		let expected: [UInt8] = [
			0xbf, 0xf8, 0x66, 0x5c, 0xfd, 0xd7, 0x33, 0x63,
			0x55, 0x0f, 0x74, 0x00, 0xe8, 0xf9, 0xd3, 0x76,
			0xb2, 0xc9, 0x08, 0x8e, 0x71, 0x3b, 0x86, 0x17,
			0xd8, 0x83, 0x92, 0x26, 0xd9, 0xf8, 0x81, 0x59,
			0x9e, 0x44, 0xd8, 0x27, 0x23, 0x49, 0x49, 0xbc,
			0x1b, 0x12, 0x34, 0x8e, 0xbc, 0x19, 0x5e, 0xc7
		]
		
		let result = try? AesSiv.aesCtr(aesKey: aesKey, iv: iv, plaintext: plaintext)

		XCTAssertEqual(expected, result)
	}

    func testS2v() {
		let plaintext: [UInt8] = [
			0x11, 0x22, 0x33, 0x44,	0x55, 0x66, 0x77, 0x88,
			0x99, 0xaa, 0xbb, 0xcc,	0xdd, 0xee
		]
		
		let expected: [UInt8] = [
			0x85, 0x63, 0x2d, 0x07,	0xc6, 0xe8, 0xf3, 0x7f,
			0x95, 0x0a, 0xcd, 0x32,	0x0a, 0x2e, 0xcc, 0x93
		]
		
		let result = try? AesSiv.s2v(macKey: macKey, plaintext: plaintext, ad: [ad])

		XCTAssertEqual(expected, result)
	}

}
